services:

# environment
  postgres:
    image: postgres:latest
    ports:
      - :5432
    healthcheck:
      test:  ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER}'"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - back-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d

  redis:
    image: redis:latest
    ports:
      - :6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test:  ["CMD-SHELL", "sh -c 'redis-cli ping'"]
      interval: 10s
      timeout: 5s
      retries: 3

    networks:
      - back-network

  kafka:
    image: bitnami/kafka:latest
    ports:
      - :9092
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=abracadabra
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9090,EXTERNAL://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      back-network:
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60

#environment-services
  discovery-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/discovery-service.Dockerfile
    ports:
      - :8761
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - back-network

  gateway:
    build:
      context: ../back
      dockerfile: ../dev-compose/gateway.Dockerfile
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CORS_ALLOWED_METHODS=${CORS_ALLOWED_METHODS}
      - CORS_ALLOWED_HEADERS=${CORS_ALLOWED_HEADERS}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS}
      - EUREKA_URI=http://discovery-service:8761/eureka
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - back-network

#services

  auth-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/auth-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - JWT_ACCESS_DURATION=${JWT_ACCESS_DURATION}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_DURATION=${JWT_REFRESH_DURATION}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/auth_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
    networks:
      - back-network

  user-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/user-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/user_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=2
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

  blacklist-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/blacklist-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/blacklist_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=3
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

  chat-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/chat-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/chat_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

  comment-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/comment-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/comment_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=5
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

  favourite-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/favourite-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/favourite_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=6
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

  recommendation-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/recommendation-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/recommendation_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
    networks:
      - back-network

  notification-service:
    build:
      context: ../back
      dockerfile: ../dev-compose/notification-service.Dockerfile
    ports:
      - :8080
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - POSTGRES_URI=jdbc:postgresql://postgres:5432/notification_service
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_DATABASE_NUMBER=7
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EUREKA_URI=http://discovery-service:8761/eureka
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    networks:
      - back-network

networks:
  back-network:

volumes:
  kafka-data:
  postgres-data:
  redis-data: